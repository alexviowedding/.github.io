"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"function"==typeof define&&define.amd?define("scripts",e):e()}(function(){var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t,r=e(function(e){var t,r;t=o,r=function(){function b(e,t,r){if(r){var o=document.createDocumentFragment(),n=!t.hasAttribute("viewBox")&&r.getAttribute("viewBox");n&&t.setAttribute("viewBox",n);for(var l=r.cloneNode(!0);l.childNodes.length;)o.appendChild(l.firstChild);e.appendChild(o)}}function v(o){o.onreadystatechange=function(){if(4===o.readyState){var r=o._cachedDocument;r||((r=o._cachedDocument=document.implementation.createHTMLDocument("")).body.innerHTML=o.responseText,o._cachedTarget={}),o._embeds.splice(0).map(function(e){var t=o._cachedTarget[e.id];t=t||(o._cachedTarget[e.id]=r.getElementById(e.id)),b(e.parent,e.svg,t)})}},o.onreadystatechange()}function m(e){for(var t=e;"svg"!==t.nodeName.toLowerCase()&&(t=t.parentNode););return t}return function(e){var s,d=Object(e),t=window.top!==window.self;s="polyfill"in d?d.polyfill:/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||/\bEdge\/.(\d+)\b/.test(navigator.userAgent)&&t;var f={},p=window.requestAnimationFrame||setTimeout,g=document.getElementsByTagName("use"),h=0;s&&function e(){for(var t=0;t<g.length;){var r=g[t],o=r.parentNode,n=m(o),l=r.getAttribute("xlink:href")||r.getAttribute("href");if(!l&&d.attributeName&&(l=r.getAttribute(d.attributeName)),n&&l){if(s)if(!d.validate||d.validate(l,n,r)){o.removeChild(r);var a=l.split("#"),i=a.shift(),c=a.join("#");if(i.length){var u=f[i];u||((u=f[i]=new XMLHttpRequest).open("GET",i),u.send(),u._embeds=[]),u._embeds.push({parent:o,svg:n,id:c}),v(u)}else b(o,n,document.getElementById(c))}else++t,++h}else++t}(!g.length||0<g.length-h)&&p(e,67)}()}},e.exports?e.exports=r():t.svg4everybody=r()}),n=e(function(e,t){var r;r=function(){return o={},n.m=r=[function(e,t,r){r.r(t);function o(e){return Array.isArray(e)?e:[e]}function c(e){return e instanceof Node}function n(e,t){if(e&&t){e=e instanceof NodeList?e:[e];for(var r=0;r<e.length&&!0!==t(e[r],r,e.length);r++);}}function l(e){return console.error("[scroll-lock] ".concat(e))}function b(e){if(Array.isArray(e))return e.join(", ")}function a(e){var t=[];return n(e,function(e){return t.push(e)}),t}function v(e,t,r,o){var n=3<arguments.length&&void 0!==o?o:document;if((!(2<arguments.length&&void 0!==r)||r)&&-1!==a(n.querySelectorAll(t)).indexOf(e))return e;for(;(e=e.parentElement)&&-1===a(n.querySelectorAll(t)).indexOf(e););return e}function m(e,t,r){var o=2<arguments.length&&void 0!==r?r:document;return-1!==a(o.querySelectorAll(t)).indexOf(e)}function i(e){return e&&"hidden"===getComputedStyle(e).overflow}function y(e){return e&&(!!i(e)||e.scrollTop<=0)}function S(e){if(e){if(i(e))return 1;var t=e.scrollTop;return e.scrollHeight<=t+e.offsetHeight}}function w(e){return e&&(!!i(e)||e.scrollLeft<=0)}function k(e){if(e){if(i(e))return 1;var t=e.scrollLeft;return e.scrollWidth<=t+e.offsetWidth}}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"disablePageScroll",function(){return d}),r.d(t,"enablePageScroll",function(){return f}),r.d(t,"getScrollState",function(){return p}),r.d(t,"clearQueueScrollLocks",function(){return g}),r.d(t,"getTargetScrollBarWidth",function(){return h}),r.d(t,"getCurrentTargetScrollBarWidth",function(){return T}),r.d(t,"getPageScrollBarWidth",function(){return L}),r.d(t,"getCurrentPageScrollBarWidth",function(){return E}),r.d(t,"addScrollableTarget",function(){return q}),r.d(t,"removeScrollableTarget",function(){return x}),r.d(t,"addScrollableSelector",function(){return G}),r.d(t,"removeScrollableSelector",function(){return M}),r.d(t,"addLockableTarget",function(){return F}),r.d(t,"addLockableSelector",function(){return W}),r.d(t,"setFillGapMethod",function(){return O}),r.d(t,"addFillGapTarget",function(){return P}),r.d(t,"removeFillGapTarget",function(){return j}),r.d(t,"addFillGapSelector",function(){return Y}),r.d(t,"removeFillGapSelector",function(){return B}),r.d(t,"refillGaps",function(){return C});var s=["padding","margin","width","max-width","none"],A={scroll:!0,queue:0,scrollableSelectors:["[data-scroll-lock-scrollable]"],lockableSelectors:["body","[data-scroll-lock-lockable]"],fillGapSelectors:["body","[data-scroll-lock-fill-gap]","[data-scroll-lock-lockable]"],fillGapMethod:s[0],startTouchY:0,startTouchX:0},d=function(e){A.queue<=0&&(A.scroll=!1,N(),H()),q(e),A.queue++},f=function(e){0<A.queue&&A.queue--,A.queue<=0&&(A.scroll=!0,_(),I()),x(e)},p=function(){return A.scroll},g=function(){A.queue=0},h=function(e,t){var r=1<arguments.length&&void 0!==t&&t;if(c(e)){var o=e.style.overflowY;r?p()||(e.style.overflowY=e.getAttribute("data-scroll-lock-saved-overflow-y-property")):e.style.overflowY="scroll";var n=T(e);return e.style.overflowY=o,n}return 0},T=function(e){if(c(e)){if(e===document.body){var t=document.documentElement.clientWidth;return window.innerWidth-t}var r=e.style.borderLeftWidth,o=e.style.borderRightWidth;e.style.borderLeftWidth="0px",e.style.borderRightWidth="0px";var n=e.offsetWidth-e.clientWidth;return e.style.borderLeftWidth=r,e.style.borderRightWidth=o,n}return 0},L=function(e){var t=0<arguments.length&&void 0!==e&&e;return h(document.body,t)},E=function(){return T(document.body)},q=function(e){e&&o(e).map(function(e){n(e,function(e){c(e)?e.setAttribute("data-scroll-lock-scrollable",""):l('"'.concat(e,'" is not a Element.'))})})},x=function(e){e&&o(e).map(function(e){n(e,function(e){c(e)?e.removeAttribute("data-scroll-lock-scrollable"):l('"'.concat(e,'" is not a Element.'))})})},G=function(e){e&&o(e).map(function(e){A.scrollableSelectors.push(e)})},M=function(e){e&&o(e).map(function(t){A.scrollableSelectors=A.scrollableSelectors.filter(function(e){return e!==t})})},F=function(e){e&&(o(e).map(function(e){n(e,function(e){c(e)?e.setAttribute("data-scroll-lock-lockable",""):l('"'.concat(e,'" is not a Element.'))})}),p()||N())},W=function(e){e&&(o(e).map(function(e){A.lockableSelectors.push(e)}),p()||N(),Y(e))},O=function(e){if(e)if(-1!==s.indexOf(e))A.fillGapMethod=e,C();else{var t=s.join(", ");l('"'.concat(e,'" method is not available!\nAvailable fill gap methods: ').concat(t,"."))}},P=function(e){e&&o(e).map(function(e){n(e,function(e){c(e)?(e.setAttribute("data-scroll-lock-fill-gap",""),A.scroll||Q(e)):l('"'.concat(e,'" is not a Element.'))})})},j=function(e){e&&o(e).map(function(e){n(e,function(e){c(e)?(e.removeAttribute("data-scroll-lock-fill-gap"),A.scroll||V(e)):l('"'.concat(e,'" is not a Element.'))})})},Y=function(e){e&&o(e).map(function(e){-1===A.fillGapSelectors.indexOf(e)&&(A.fillGapSelectors.push(e),A.scroll||X(e))})},B=function(e){e&&o(e).map(function(t){A.fillGapSelectors=A.fillGapSelectors.filter(function(e){return e!==t}),A.scroll||z(t)})},C=function(){A.scroll||H()},N=function(){var e=b(A.lockableSelectors);D(e)},_=function(){var e=b(A.lockableSelectors);R(e)},D=function(e){var t=document.querySelectorAll(e);n(t,function(e){U(e)})},R=function(e){var t=document.querySelectorAll(e);n(t,function(e){K(e)})},U=function(e){if(c(e)&&"true"!==e.getAttribute("data-scroll-lock-locked")){var t=window.getComputedStyle(e);e.setAttribute("data-scroll-lock-saved-overflow-y-property",t.overflowY),e.setAttribute("data-scroll-lock-saved-inline-overflow-property",e.style.overflow),e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property",e.style.overflowY),e.style.overflow="hidden",e.setAttribute("data-scroll-lock-locked","true")}},K=function(e){c(e)&&"true"===e.getAttribute("data-scroll-lock-locked")&&(e.style.overflow=e.getAttribute("data-scroll-lock-saved-inline-overflow-property"),e.style.overflowY=e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-saved-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-locked"))},H=function(){A.fillGapSelectors.map(function(e){X(e)})},I=function(){A.fillGapSelectors.map(function(e){z(e)})},X=function(e){var t=document.querySelectorAll(e),r=-1!==A.lockableSelectors.indexOf(e);n(t,function(e){Q(e,r)})},Q=function(e,t){var r=1<arguments.length&&void 0!==t&&t;if(c(e)){var o;if(""===e.getAttribute("data-scroll-lock-lockable")||r)o=h(e,!0);else{var n=v(e,b(A.lockableSelectors));o=h(n,!0)}"true"===e.getAttribute("data-scroll-lock-filled-gap")&&V(e);var l=window.getComputedStyle(e);if(e.setAttribute("data-scroll-lock-filled-gap","true"),e.setAttribute("data-scroll-lock-current-fill-gap-method",A.fillGapMethod),"margin"===A.fillGapMethod){var a=parseFloat(l.marginRight);e.style.marginRight="".concat(a+o,"px")}else if("width"===A.fillGapMethod)e.style.width="calc(100% - ".concat(o,"px)");else if("max-width"===A.fillGapMethod)e.style.maxWidth="calc(100% - ".concat(o,"px)");else if("padding"===A.fillGapMethod){var i=parseFloat(l.paddingRight);e.style.paddingRight="".concat(i+o,"px")}}},z=function(e){var t=document.querySelectorAll(e);n(t,function(e){V(e)})},V=function(e){if(c(e)&&"true"===e.getAttribute("data-scroll-lock-filled-gap")){var t=e.getAttribute("data-scroll-lock-current-fill-gap-method");e.removeAttribute("data-scroll-lock-filled-gap"),e.removeAttribute("data-scroll-lock-current-fill-gap-method"),"margin"===t?e.style.marginRight="":"width"===t?e.style.width="":"max-width"===t?e.style.maxWidth="":"padding"===t&&(e.style.paddingRight="")}};"undefined"!=typeof window&&window.addEventListener("resize",function(){C()}),"undefined"!=typeof document&&(document.addEventListener("touchstart",function(e){A.scroll||(A.startTouchY=e.touches[0].clientY,A.startTouchX=e.touches[0].clientX)}),document.addEventListener("touchmove",function(a){if(!A.scroll){var e=A.startTouchY,t=A.startTouchX,r=a.touches[0].clientY,o=a.touches[0].clientX;if(a.touches.length<2){var i=b(A.scrollableSelectors),c=e<r,u=r<e,s=t<o,d=o<t,f=e+3<r,p=r<e-3,g=t+3<o,h=o<t-3;!function e(t,r){var o=1<arguments.length&&void 0!==r&&r;if(t){var n=v(t,i,!1);if(m(t,'input[type="range"]'))return!1;if(o||m(t,'textarea, [contenteditable="true"]')&&v(t,i)||m(t,i)){var l=!1;w(t)&&k(t)?(c&&y(t)||u&&S(t))&&(l=!0):y(t)&&S(t)?(s&&w(t)||d&&k(t))&&(l=!0):(f&&y(t)||p&&S(t)||g&&w(t)||h&&k(t))&&(l=!0),l&&(n?e(n,!0):a.preventDefault())}else e(n)}else a.preventDefault()}(a.target)}}},{passive:!1}),document.addEventListener("touchend",function(){A.scroll||(A.startTouchY=0,A.startTouchX=0)}));var Z={hide:function(e){l('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'),d(e)},show:function(e){l('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'),f(e)},toggle:function(e){l('"toggle" is deprecated! Do not use it.'),p()?d():f(e)},getState:function(){return l('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'),p()},getWidth:function(){return l('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'),L()},getCurrentWidth:function(){return l('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'),E()},setScrollableTargets:function(e){l('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'),q(e)},setFillGapSelectors:function(e){l('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'),Y(e)},setFillGapTargets:function(e){l('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'),P(e)},clearQueue:function(){l('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'),g()}},J=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),o.forEach(function(e){u(t,e,r[e])})}return t}({disablePageScroll:d,enablePageScroll:f,getScrollState:p,clearQueueScrollLocks:g,getTargetScrollBarWidth:h,getCurrentTargetScrollBarWidth:T,getPageScrollBarWidth:L,getCurrentPageScrollBarWidth:E,addScrollableSelector:G,removeScrollableSelector:M,addScrollableTarget:q,removeScrollableTarget:x,addLockableSelector:W,addLockableTarget:F,addFillGapSelector:Y,removeFillGapSelector:B,addFillGapTarget:P,removeFillGapTarget:j,setFillGapMethod:O,refillGaps:C,_state:A},Z);t.default=J}],n.c=o,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"===_typeof(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0).default;function n(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,n),t.l=!0,t.exports}var r,o},e.exports=r()}),l=(t=n)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;function a(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function r(e){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.container=e,this.triggerBtn=this.container.querySelector("[data-test-api]"),this.requestResult=this.container.querySelector("[data-test-result]"),this.requestUrl=this.triggerBtn.dataset.testApi,this.triggerBtn.addEventListener("click",function(e){t.requestResponse()})}var e,t,o;return e=r,(t=[{key:"requestResponse",value:function(){var t=this;fetch(this.requestUrl).then(function(e){return e.json()}).then(function(e){e&&(t.requestResult.innerHTML=e.title+e.message)})}}])&&a(e.prototype,t),o&&a(e,o),r}();function c(a){var e=document.querySelector("[data-countdow]"),i=e.querySelector("[data-countdow-days]"),c=e.querySelector("[data-countdow-hours]"),u=e.querySelector("[data-countdow-minutes]");function t(){var e,t,r,o,n,l=(e=a,t=Date.parse(e)-Date.parse(new Date),r=Math.floor(t/1e3/60%60),o=Math.floor(t/36e5%24),n=Math.floor(t/864e5),{total:t,days:n,hours:o,minutes:r});i.innerHTML=l.days,c.innerHTML=("0"+l.hours).slice(-2),u.innerHTML=("0"+l.minutes).slice(-2),l.total<=0&&clearInterval(s)}t();var s=setInterval(t,1e3)}function u(e){({control:e.querySelector("[".concat("data-btn-going","]"))}).control.addEventListener("click",function(e){e.preventDefault()})}function s(r){r.addEventListener("click",function(e){e.preventDefault();var t=r.getAttribute("href").substr(1);document.getElementById(t).scrollIntoView({behavior:"smooth",block:"start"})})}ymaps.ready(function(){var e=[53.902987,27.557666],t=new ymaps.Map("map",{center:e,zoom:17}),r=new ymaps.Placemark(e);t.geoObjects.add(r),t.behaviors.disable("scrollZoom")}),r();var d=".js-scroll-animation";window.app={header:null,scroll:{disable:l.disablePageScroll,enable:l.enablePageScroll},setInert:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach(function(e){e.setAttribute("inert",!0)})},removeInert:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach(function(e){e.removeAttribute("inert")})},initModule:function(t,e){e?Array.prototype.slice.call(document.querySelectorAll(e)).forEach(function(e){new t(e)}):new t},init:function(){app.initModule(i,".js-test-api"),app.initModule(u,".js-invitation"),function(){var r="is-open",o=location.search.split("?=")[1],n=document.querySelector(".js-invitation"),t=n.querySelector("[data-invitation-confirmation]"),e=t.querySelectorAll("[data-btn-going]"),l=n.querySelector("[data-invitation-form]");e.forEach(function(e){e.addEventListener("click",function(){"true"===e.dataset.btnGoing?(db.collection("users").doc(o).update({Coming:!0}),t.classList.remove(r),l.classList.add(r)):"false"===e.dataset.btnGoing&&(db.collection("users").doc(o).update({Coming:!1}),n.classList.remove(r))})});var a=document.querySelector("[data-header-invitation-text]");db.collection("users").get().then(function(e){e.forEach(function(e){if(e.id===o){var t=e.data();a.innerText="".concat(t.Name,", вы приглашены на свадьбу"),t.Coming||n.classList.add(r)}})}),l.addEventListener("submit",function(e){e.preventDefault(),db.collection("users").doc(o).update({Persons:l.persons.value}),n.classList.remove(r)})}();c("2021-08-07"),app.initModule(s,d)}},window.addEventListener("DOMContentLoaded",app.init)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
